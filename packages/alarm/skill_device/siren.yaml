homeassistant:
  customize:
    package.node_anchors:
        Sirena1: &siren1 switch.sirena


##############################################################
#         DA QUESTO PUNTO NON MODIFICARE
##############################################################
automation:
  - alias: "Allarme: Sirena"
    id: allarme_sirena
    mode: restart
    variables:
      alarm: >
        {% from 'alarm.jinja' import state_alarm %}
        {{ (state_alarm()|from_json)['alarm']}}
    trigger:
      - platform: template
        value_template: >
          {% from 'alarm.jinja' import state_alarm %}
          {%set alarm = (state_alarm()|from_json)['alarm'] %}
          {{ is_state(alarm,'pending')  and now() < states[alarm].last_changed+ timedelta(seconds=1)}}
      - platform: template
        value_template: >
          {% from 'alarm.jinja' import state_alarm %}
          {%set alarm = (state_alarm()|from_json)['alarm'] %}
          {{ is_state(alarm,'triggered')  and now() < states[alarm].last_changed+ timedelta(seconds=1)}}
      - platform: template
        value_template: >
          {% from 'alarm.jinja' import state_alarm %}
          {%set alarm = (state_alarm()|from_json)['alarm'] %}
          {{ is_state(alarm,'disarmed')  and now() < states[alarm].last_changed+ timedelta(seconds=1)}}
    action:
    - choose:
        - alias: Primo avviso sensore scattato
          conditions:
            - "{{trigger.to_state.state == 'pending'}}"
          sequence:
          - service: switch.turn_on
            target:
              entity_id: *siren1
          - delay:
              milliseconds: 700

          - service: switch.turn_off
            target:
              entity_id: *siren1

        - alias: Allarme scattato
          conditions:
            - "{{trigger.to_state.state == 'triggered'}}"
          sequence:
            - service: switch.turn_on
              target:
                entity_id: *siren1


        - alias: Allarme disattivato
          conditions:
            - "{{trigger.to_state.state != 'triggered'}}"
          sequence:
          - alias: Spegni sirena
            service: switch.turn_off
            target:
              entity_id: *siren1


################################################################################
##                  Script
###################################################
script:
  sirena_zigbee_turn_on:
    sequence:
      - service: mqtt.publish
        data:
          topic: 'zigbee2mqtt/SirenaZigbee/set'
          payload: '{"warning": {"duration": 120, "mode": "burglar", "level": "very_high", "strobe": true}}'


  sirena_zigbee_turn_off:
    sequence:
      - service: mqtt.publish
        data:
          topic: 'zigbee2mqtt/SirenaZigbee/set'
          payload: '{"warning": {"duration": 5, "mode": "stop", "level": "low", "strobe": true}}'

################################################################################
##                  MQTT
###################################################
mqtt:
  switch:
    - unique_id: "sirena_zigbee"
      name: Sirena Zigbee
      state_topic: "zigbee2mqtt/SirenaZigbee/set"
      availability_topic: "zigbee2mqtt/bridge/state"
      payload_off: '{"warning": {"duration": 5, "mode": "stop", "level": "low", "strobe": true}}'
      payload_on: '{"warning": {"duration": 120, "mode": "burglar", "level": "very_high", "strobe": true}}'
      command_topic: "zigbee2mqtt/SirenaZigbee/set"
