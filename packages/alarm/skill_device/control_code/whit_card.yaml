#################################################
# ATTENZIONE: file funzionante solo con la card #
#################################################

input_number:
  control_code_alarm:
    name: Codice allarme
    mode: box
    min: 0
    initial: 0
    max: 9999999999
    step: 1

template:
  - sensor:
      - name: setting_code
        state: >-
          {% from 'alarm.jinja' import state_alarm %}
          {{ (state_alarm()|from_json)['code'] }}

  - trigger:
      - platform: template
        value_template: >-
          {% from 'alarm.jinja' import state_alarm %}
          {% set alarm = (state_alarm()|from_json)['alarm'] %}
          {{ is_state(alarm, 'arming') and now() < states[alarm].last_changed + timedelta(seconds=1) }}
      - platform: template
        value_template: >-
          {% from 'alarm.jinja' import state_alarm %}
          {% set alarm = (state_alarm()|from_json)['alarm'] %}
          {{ is_state(alarm, 'triggered') and now() < states[alarm].last_changed + timedelta(seconds=1) }}
      - platform: template
        value_template: >-
          {% from 'alarm.jinja' import state_alarm %}
          {% set alarm = (state_alarm()|from_json)['alarm'] %}
          {{ is_state(alarm, 'pending') and now() < states[alarm].last_changed + timedelta(seconds=1) }}
      - platform: state
        entity_id: button.confirmed_code_alarm
    sensor:
      - name: counter_code_error
        state: >-
          {% if trigger.entity_id == 'button.confirmed_code_alarm' and not is_state('input_number.control_code_alarm', '0.0') %}
           {{ 1 if this.state| int(0) == 0 else this.state| int(0) + 1 }}
          {% elif trigger.entity_id == 'button.confirmed_code_alarm' and is_state('input_number.control_code_alarm', '0.0') %}
           {{ this.state| int(0) }}
          {% else  %}
            0
          {% endif %}

  - button:
      - name: confirmed_code_alarm
        press:
          - variables:
              alarm: >-
                {% from 'alarm.jinja' import state_alarm %}
                {{ (state_alarm()|from_json)['alarm'] }}
              code: >-
                {% from 'alarm.jinja' import state_alarm %}
                {{ (state_alarm()|from_json)['code'] }}
          - choose:
              - alias: Disattiva allarme
                conditions:
                  - or:
                      - "{{ states('input_number.control_code_alarm')|int(0) == code|int(0) }}"
                      - >-
                        {% from 'alarm.jinja' import state_alarm %}
                        {% set code_service = (state_alarm()|from_json)['code_service'] %}
                        {{ states('input_number.control_code_alarm')|int(0) == code_service|int(0) and is_state('input_boolean.code_service', 'on') }}
                sequence:
                  - service: alarm_control_panel.alarm_disarm
                    target:
                      entity_id: "{{ alarm }}"
                    data:
                      code: "{{ code }}"

              - alias: Codice di emergenza per disattivare allarme ed inviare notifica di pericolo
                conditions:
                  - "{{ states('input_number.control_code_alarm')|int(0) == states('sensor.emergency_code')|int(0) }}"
                sequence:
                  - alias: Evento creato per essere usato come trigger in altre automazioni
                    event: customizations
                    event_data:
                      types: emergency_code
                  - service: alarm_control_panel.alarm_disarm
                    target:
                      entity_id: "{{ alarm }}"
                    data:
                      code: "{{ code }}"
                  - variables:
                      message: >-
                        {{ "Attenzione Ã¨ stato disattivato l'allarme con codice di emergenza alle " + (now().strftime("%H:%M"))|string }}
                  - alias: Invia chiamata voip alle persone che NON si trovano in casa
                    event: customizations
                    event_data:
                      types: notify_alarm
                      notify: disattivato_con_codice_emergenza_solovoip
                      message: "{{ message }}"
                      for_each: >-
                        {% from 'personal.jinja' import persons %}
                        {% set output = namespace(state_home=[]) %}
                          {% for dict in persons()|from_json if states[dict.person].state != 'home' and dict.cellulare != 'none' %}
                            {# lista persone non in casa con numero cellulare associato #}
                            {% set output.state_home = output.state_home + [dict['cellulare']] %}
                          {% endfor %}
                          {{ output.state_home }}
                  - alias: Invia notifica PUSH alle persone che NON si trovano in casa
                    event: customizations
                    event_data:
                      types: notify_alarm
                      notify: disattivato_con_codice_emergenza_solopush
                      critical: 1.0
                      tag: control_code
                      message: "{{ message }}"
                      for_each: >-
                        {% from 'personal.jinja' import persons %}
                        {% set output = namespace(state_home=[]) %}
                          {% for dict in persons()|from_json if states[dict.person].state != 'home' %}
                            {# lista persone non in casa #}
                            {% set output.state_home = output.state_home + ['notify.'+dict['notify']] %}
                          {% endfor %}
                          {{ output.state_home }}
                      action2: None

              - alias: Controlla tentativi codice errato
                conditions:
                  - "{{ (states('sensor.counter_code_error')|int(0) >= states('sensor.alarm_code_attempts')|int(0)) }}"
                sequence:
                  - service: alarm_control_panel.alarm_trigger
                    target:
                      entity_id: "{{ alarm }}"
                  - alias: INVIA NOTIFICA
                    event: customizations
                    event_data:
                      types: notify_alarm
                      critical: 1.0
                      tag: control_code
                      notify: tentativi_codici_superati
                      message: "{{ 'Allarme!!! Troppi tentativi di inserimento codice rilevati alle ore ' + (now().strftime('%H:%M'))|string }}"

          - service: script.control_code_alarm

script:
  control_code_alarm:
    alias: Inserisci codice allarme
    mode: restart
    variables:
      n: "canc"
    sequence:
      - service: input_number.set_value
        data:
          value: >-
            {% if  n != 'canc' %}
              {{ (states('input_number.control_code_alarm')|int(0))|string + n|string }}
            {% else %}
              0
            {% endif %}
        target:
          entity_id: input_number.control_code_alarm
      - delay:
          minutes: 1
      - service: input_number.set_value
        data:
          value: 0
        target:
          entity_id: input_number.control_code_alarm
