homeassistant:
  customize:
    package.node_anchors:
        Porda d'ingresso: &porta        binary_sensor.porta_ingresso
        Serratura: &lock lock.danalock
# Nel pkg viene utilizzata una serratura danalock

##############################################################
#         DA QUESTO PUNTO NON MODIFICARE
##############################################################
automation:
- alias: Gestione serratura con tastiera esterna
  id: smart_lock_alarm_keypad
  variables:
    code: >
      {% from 'alarm.jinja' import state_alarm %}
      {{ (state_alarm()|from_json)['code']}}
    alarm: >
      {% from 'alarm.jinja' import state_alarm %}
      {{ (state_alarm()|from_json)['alarm']}}
    porta: *porta
  mode: single
  trigger:
      - platform: state
        entity_id: sensor.keypad_code
  action:
    - choose:
        - alias: Apertura serratura con tastiera e codice specifico
          conditions:
            - >
              {% from 'alarm.jinja' import state_alarm %}
              {% set code_porta = (state_alarm()|from_json)['code_porta'] %}
              {{states(trigger.entity_id)|int(0) == code_porta|int(0)}}
            - "{{states(alarm) == 'disarmed' }}"
          sequence:
            - service: lock.unlock
              target:
                entity_id: *lock
        - alias: Serratura con stato allarme
          conditions:
            - "{{states(trigger.entity_id)|int(0) == code|int(0) }}"
          sequence:
            - delay:
                milliseconds: 500
            - if:
                - "{{states(alarm) == 'disarmed' }}"
              then:
                - wait_template: "{{ is_state(porta, 'off') and is_states(alarm,'armed_away') }}"
                - service: lock.lock
                  target:
                    entity_id: *lock
              else:
                - service: lock.unlock
                  target:
                    entity_id: *lock
