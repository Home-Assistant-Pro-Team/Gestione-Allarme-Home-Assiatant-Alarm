#################################################################
#               NON OCCORRONO PERSONALIZZAZIONI                 #
#################################################################
timer:
  delay_active_presence_simulation:
    name: Ritardo avvio simulazione presenza
    restore: true
  delay_active_motion_simulation:
    name: Ritardo azioni casa
    restore: true

input_number:
  delay_active_presence_simulation:
    name: Ritardo avvio simulazione presenza
    mode: box
    icon: mdi:timelapse
    unit_of_measurement: "h"
    min: 0
    max: 48
    step: 1

input_boolean:
  presence_simulation:
    name: Simulazione presenza
  check_presence_simulation:

input_datetime:
  presence_simulation_on:
    has_date: false
    has_time: true
    name: Orario inizio simulazione presenza
  presence_simulation_off:
    has_date: false
    has_time: true
    name: Orario fine simulazione presenza

template:
  # LISTA MP3
  - sensor:
      - name: Lista mp3 simulazione presenza
        state: "{{ states('automation.allarme_simulazione_presenza_allarme') }}"
        attributes:
          list_mp3: >-
            {{
              [
                'audio1',
                'audio2',
                'audio3',
                'audio4',
                'audio5',
              ] 
            }}
  # LIGHT
  - select:
      - name: "Aggiungi o rimuovi luci per simulazione presenza"
        state: "{{ states('sensor.lista_luci_allarme_per_simulazione_presenza') }}"
        options: >-
          {% from 'alarm.jinja' import presence_simulation %}
          {{ presence_simulation(states.light) }}
        select_option:
          - event: customizations
            event_data:
              types: presence_simulation_light
              sensor_select: "{{ option }}"
  - trigger:
      - platform: event
        event_type: customizations
        event_data:
          types: presence_simulation_light
    sensor:
      - name: Lista luci allarme per simulazione presenza
        state: "{{ trigger.event.data.sensor_select }}"
        attributes:
          print_list_group: >-
            {% from 'alarm.jinja' import list_sensor_entity %}
            {{ list_sensor_entity(trigger.event.data.sensor_select, this.attributes.print_list_group, states.light) }}
          print_list_name: >-
            {% from 'alarm.jinja' import list_sensor_name %}
            {{ list_sensor_name(trigger.event.data.sensor_select, this.attributes.print_list_name) }}
  # COVER
  - select:
      - name: "Aggiungi o rimuovi cover per simulazione presenza"
        state: "{{ states('sensor.lista_cover_allarme_per_simulazione_presenza') }}"
        options: >-
          {% from 'alarm.jinja' import presence_simulation %}
          {{ presence_simulation(states.cover) }}
        select_option:
          - event: customizations
            event_data:
              types: presence_simulation_cover
              sensor_select: "{{ option }}"
  - trigger:
      - platform: event
        event_type: customizations
        event_data:
          types: presence_simulation_cover
    sensor:
      - name: Lista cover allarme per simulazione presenza
        state: "{{ trigger.event.data.sensor_select }}"
        attributes:
          print_list_group: >-
            {% from 'alarm.jinja' import list_sensor_entity %}
            {{ list_sensor_entity(trigger.event.data.sensor_select, this.attributes.print_list_group, states.cover) }}
          print_list_name: >-
            {% from 'alarm.jinja' import list_sensor_name %}
            {{ list_sensor_name(trigger.event.data.sensor_select, this.attributes.print_list_name) }}
  # MEDIAPLAYER
  - select:
      - name: "Aggiungi o rimuovi media player per simulazione presenza"
        state: "{{ states('sensor.lista_media_player_allarme_per_simulazione_presenza') }}"
        options: >-
          {% set google = states.media_player | selectattr('attributes.device_class', 'defined') | selectattr('attributes.device_class', 'eq', 'speaker') | map(attribute='entity_id') | select('in', integration_entities('cast')) | list %}
          {% set alexa = states.media_player | selectattr('attributes.source','eq','Local Speaker') | map(attribute='entity_id') | select('in', integration_entities('alexa_media')) | list %}
          {% set output = namespace(numbers=[]) %}
          {% for d in google + alexa %}
            {% set output.numbers = output.numbers + [states[d].name ] %}
          {% endfor %}
            {{ ['RESET'] + output.numbers }}
        select_option:
          - event: customizations
            event_data:
              types: presence_simulation_media_player
              sensor_select: "{{ option }}"
  - trigger:
      - platform: event
        event_type: customizations
        event_data:
          types: presence_simulation_media_player
    sensor:
      - name: Lista media player allarme per simulazione presenza
        state: "{{ trigger.event.data.sensor_select }}"
        attributes:
          print_list_group: >-
            {% from 'alarm.jinja' import list_sensor_entity %}
            {{ list_sensor_entity(trigger.event.data.sensor_select, this.attributes.print_list_group, states.media_player) }}
          print_list_name: >-
            {% from 'alarm.jinja' import list_sensor_name %}
            {{ list_sensor_name(trigger.event.data.sensor_select, this.attributes.print_list_name) }}

automation:
  - alias: "Allarme: Simulazione presenza allarme"
    id: allarme_simulazione_presenza_allarme
    mode: restart
    initial_state: true
    trigger:
      - alias: Allarme inserito
        platform: template
        value_template: >-
          {% from 'alarm.jinja' import state_alarm %}
          {% set alarm = (state_alarm() | from_json) ['alarm'] %}
          {{ is_state(alarm, 'armed_away') and now() < states[alarm].last_changed + timedelta(seconds=1) }}
      - alias: Inizio simulazione presenza
        platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.delay_active_presence_simulation
      - alias: Step di simulazione presenza
        platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.delay_active_motion_simulation
      - alias: Allarme disattivato
        platform: template
        value_template: >-
          {% from 'alarm.jinja' import state_alarm %}
          {% set alarm = (state_alarm() | from_json) ['alarm'] %}
          {{ is_state(alarm, 'disarmed') and now() < states[alarm].last_changed + timedelta(seconds=1) }}
    action:
      - alias: Timer generale per avvio gestione simulazione presenza
        if:
          - "{{ trigger.to_state.state == 'armed_away' and is_state('input_boolean.alarm_triggered_state', 'off') }}"
          - "{{ is_state('input_boolean.presence_simulation', 'on') }}"
        then:
          - alias: Imposta timer per inizio simulazione presenza
            service: timer.start
            data:
              duration:
                hours: "{{ states('input_number.delay_active_presence_simulation') | int(default=0) }}"
            target:
              entity_id: timer.delay_active_presence_simulation
          - delay:
              minutes: 1
          - alias: Salva stato luci e tapparelle selezionate
            service: scene.create
            data:
              scene_id: light_cover_presence_simulation
              snapshot_entities: "{{ state_attr('sensor.lista_luci_allarme_per_simulazione_presenza', 'print_list_group') | list + state_attr('sensor.lista_cover_allarme_per_simulazione_presenza', 'print_list_group') | list }}"

      - alias: Avvio simulazione presenza
        if:
          - "{{ is_state('input_boolean.presence_simulation', 'on') }}"
          - >-
            {% from 'alarm.jinja' import state_alarm %}
            {% set alarm = (state_alarm() | from_json) ['alarm'] %}
            {{ is_state(alarm, 'armed_away') }}
          - or:
              - "{{ trigger.event.data.entity_id == 'timer.delay_active_presence_simulation' }}"
              - "{{ trigger.event.data.entity_id == 'timer.delay_active_motion_simulation' }}"
        then:
          - alias: Imposta timer per ripetizione simulazione presenza
            service: timer.start
            data:
              duration:
                minutes: "{{ range(10, 59) | random }}"
            target:
              entity_id: timer.delay_active_motion_simulation

          - alias: Abilita boolean check ed invia notifica (solo la prima volta)
            if: "{{ is_state('input_boolean.check_presence_simulation', 'off') }}"
            then:
              - alias: INVIA NOTIFICA
                event: customizations
                event_data:
                  types: notify_alarm
                  tag: presence_simulation
                  notify: presence_simulation_mobile
                  message: Avvio simulazione presenza
                  title1: Disattiva simulazione
                  action1: disable_presence_simulation
                  title2: Disattiva allarme
                  action2: disable_notify_alarm
              - alias: Abilita boolean ceck
                service: input_boolean.turn_on
                target:
                  entity_id: input_boolean.check_presence_simulation
          - alias: >-
              Se fascia oraria corretta attiva avvia azione simulazioni presenza controllando orario per luci 
              altrimenti chiudi tutte le tapparelle e segni le luci
            if:
              - alias: "Verifica se fascia oraria corretta"
                condition: time
                after: "input_datetime.presence_simulation_on"
                before: "input_datetime.presence_simulation_off"
            then:
              # LUCI
              - alias: "Verifica se dopo tramonto"
                if:
                  - condition: state
                    entity_id: sun.sun
                    state: below_horizon
                then:
                  - alias: Spegni tutte le luci
                    service: light.turn_off
                    target:
                      entity_id: "{{ expand( state_attr('sensor.lista_luci_allarme_per_simulazione_presenza', 'print_list_group' )) | selectattr('state', 'eq', 'on') | map(attribute='entity_id') | list }}"
                  - alias: Accendi un terzo (in eccesso) dello luci in modo casuale
                    repeat:
                      count: "{{ (state_attr('sensor.lista_luci_allarme_per_simulazione_presenza', 'print_list_group') | count / 3 )| round(0) }}"
                      sequence:
                        - alias: Accenddi una luce casuale
                          service: light.turn_on
                          target:
                            entity_id: "{{ state_attr('sensor.lista_luci_allarme_per_simulazione_presenza', 'print_list_group') | random }}"
              # COVER
              - alias: Muovi la metà (in difetto) delle tapparelle ad una percentuale causale
                repeat:
                  count: >-
                    {% set covers = state_attr('sensor.lista_cover_allarme_per_simulazione_presenza', 'print_list_group') | count %}
                    {{ 1 if 0 < covers <= 1 else covers // 2 }}
                  sequence:
                    - alias: Imposta tapparelle ad una posizione casuale multipla di 10
                      service: cover.set_cover_position
                      data:
                        position: "{{ range(11) | random * 10}}"
                      target:
                        entity_id: "{{ state_attr('sensor.lista_cover_allarme_per_simulazione_presenza', 'print_list_group') | random }}"
              # MEDIA_PLAYER
              - variables:
                  alexa: >-
                    {% set output = namespace(numbers=[]) %}
                    {% for integrations in integration_entities('alexa_media') if integrations in state_attr('sensor.lista_media_player_allarme_per_simulazione_presenza', 'print_list_group') %}
                      {% set output.numbers = output.numbers + [integrations] %}
                    {% endfor %}
                      {{output.numbers}}
                  google: >-
                    {% set output = namespace(numbers=[]) %}
                    {% for integrations in integration_entities('cast') if integrations in state_attr('sensor.lista_media_player_allarme_per_simulazione_presenza', 'print_list_group') %}
                      {% set output.numbers = output.numbers + [integrations] %}
                    {% endfor %}
                      {{output.numbers}}
              - alias: Attiva i media player
                event: customizations
                event_data:
                  types: notify_alarm
                  notify: presence_simulation
                  message: "{{ state_attr('sensor.lista_mp3_simulazione_presenza', 'list_mp3') | random }}"
                  mp3: true
                  target_alexa: "{{ alexa }}"
                  target_google: "{{ google }}"

            else:
              - alias: Spegni tutte le luci per notte
                service: light.turn_off
                target:
                  entity_id: "{{ expand( state_attr('sensor.lista_luci_allarme_per_simulazione_presenza', 'print_list_group' )) | selectattr('state', 'eq', 'on') | map(attribute='entity_id') | list }}"
              - alias: Chiudi le tapparelle per notte
                service: cover.close_cover
                target:
                  entity_id: "{{ expand( state_attr('sensor.lista_cover_allarme_per_simulazione_presenza', 'print_list_group' )) | selectattr('state', 'eq', 'open') | map(attribute='entity_id') | list }}"

      - alias: Ripristina stato precedente per allarme disattivato
        if:
          - "{{ trigger.to_state.state == 'disarmed' }}"
          - "{{ is_state('input_boolean.check_presence_simulation', 'on') }}"
        then:
          - alias: Ripristina stato casa al momento dell'inserimento allarme
            service: scene.turn_on
            target:
              entity_id: scene.light_cover_presence_simulation
          - service: timer.cancel
            data: {}
            target:
              entity_id:
                - timer.delay_active_motion_simulation
                - timer.delay_active_presence_simulation
          - alias: Disattiva boolean ceck
            service: input_boolean.turn_off
            target:
              entity_id: input_boolean.check_presence_simulation
