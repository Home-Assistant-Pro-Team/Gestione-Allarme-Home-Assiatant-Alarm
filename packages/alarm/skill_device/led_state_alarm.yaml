homeassistant:
  customize:
    package.node_anchors:
        Led o luce stato allarme: &led switch.led_allarme

##############################################################
#         DA QUESTO PUNTO NON MODIFICARE
##############################################################
automation:
- alias: Led Stato Allarme
  id: led_state_alarm
  mode: single
  trigger:
    - platform: template
      value_template: >
        {% from 'alarm.jinja' import state_alarm %}
        {% set alarm = (state_alarm()|from_json)['alarm'] %}
        {{ is_state(alarm,'arming') and now() < states[alarm].last_changed+ timedelta(seconds=1) }}
    - platform: template
      value_template: >
        {% from 'alarm.jinja' import state_alarm %}
        {% set alarm = (state_alarm()|from_json)['alarm'] %}
        {{ is_state(alarm,'triggered') and now() < states[alarm].last_changed+ timedelta(seconds=1) }}
    - platform: template
      value_template: >
        {% from 'alarm.jinja' import state_alarm %}
        {% set alarm = (state_alarm()|from_json)['alarm'] %}
        {{ is_state(alarm,'disarmed') and now() < states[alarm].last_changed+ timedelta(seconds=1) }}
  action:
    - choose:

      - alias: Accendi led se allarme inserito
        conditions:
        - "{{ trigger.to_state.state == 'arming' }}"
        sequence:
        - service: switch.turn_on
          target:
            entity_id: *led

      - alias: Spegni led per allarme disattivato
        conditions:
        - "{{ trigger.to_state.state == 'disarmed' }}"
        sequence:
        - service: switch.turn_off
          target:
            entity_id: *led

      - alias: Fai lampeggiare led per allarme scattato fino a quando lo stato non passa a disarmato per 10 minuti
        conditions:
        - "{{ trigger.to_state.state == 'triggered' }}"
        sequence:
        - repeat:
            until:
            - or:
              - condition: template
                value_template: > 
                  {% from 'alarm.jinja' import state_alarm %}                  
                  {% set alarm = (state_alarm()|from_json)['alarm'] %}
                  {{ states[alarm].state == 'disarmed' and now() > states[alarm].last_changed+ timedelta(minutes=10) }}
              - "{{ trigger.to_state.state == 'disarmed' and trigger.from_state.state == 'triggered' }}"
            sequence:
            - service: switch.turn_on
              target:
                entity_id: *led
            - delay:
                seconds: 2
            - service: switch.turn_off
              target:
                entity_id: *led
            - delay:
                seconds: 2