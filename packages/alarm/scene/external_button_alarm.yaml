homeassistant:
  customize:
    package.node_anchors:
        Porda d'ingresso: &porta        binary_sensor.porta_ingresso
# Occorre personalizzare il trigger in base al button e l'integrazione usata

automation:
- alias: "Permetti di aprire la porta con allarme notte inserito" 
  id: permit_alarm_night_door
  variables:
    alarm: >
      {% from 'alarm.jinja' import state_alarm %}
      {{ (state_alarm()|from_json)['alarm']}}
    porta: *porta
  trigger:
    - platform: state
      entity_id: sensor.tasto_porta_ingresso_action
      to: "single"
  condition:
    - "{{is_states(alarm,'armed_night')}}"
  action:
    - alias: Disattiva Allarme
      service: alarm_control_panel.alarm_disarm
      data:
        code: >
          {% from 'alarm.jinja' import state_alarm %}
          {{ (state_alarm()|from_json)['code']}}
      target:
        entity_id: "{{ alarm }}"
        
    - alias: Attendi che la porta venga chiusa
      wait_for_trigger:
        - platform: state
          entity_id: *porta
          from: 'on'
          to: 'off'
      timeout:
        minutes: 1

    - if: 
        - "{{wait.trigger.to_state.state == 'off'}}"
      then:
        - alias: Inserisci allarme notte se qualcuno è rimasto a letto e ci sono più di una persona in casa
          service: >
            {% set bed_presence = (states.binary_sensor|selectattr('entity_id','search','.bedprecence_')|selectattr('state','eq','on')|list)|count != 0 %}
            {% from 'alarm.jinja' import person_alarm %}
            {% set output = namespace(state_home=[]) %}
            {%for d in person_alarm()|from_json if states[d.person].state == 'home'%}
            {%- set output.state_home = output.state_home + [d['person'] ] -%}
            {% endfor %}
            {{ 'alarm_control_panel.alarm_arm_night' if output.state_home|count > 1 and output.state_home|count > 1 and bed_presence else 'alarm_control_panel.alarm_arm_away'}}
          target:
            entity_id: "{{ alarm }}"
      else:
        - alias: Ripristina allarme per timeout controllando stato porta
          if: "{{is_state(porta,'off')}}"
          then:

          - alias: Ripristina allarme per timeout
            service: alarm_control_panel.alarm_arm_night
            target:
              entity_id: "{{ alarm }}"
          else:
            - variables:
                for_each: >
                  {% from 'alarm.jinja' import person_alarm %}
                  {% set output = namespace(state_home=[]) %}
                    {%for dict in person_alarm()|from_json if states[dict.person].state == 'home'%}
                      {%- set output.state_home = output.state_home + ['notify.'+dict['notify'] ] -%}
                    {% endfor %}
                    {{output.state_home}}
            - alias: Invia notifica push SOLO alla persone che si trovano 
              event: customizations
              event_data:
                types: notify_alarm
                title1: Attiva globale
                action1: armed_away
                title2: Attiva Notte
                action2: armed_night
                tag: state_alarm
                notify: allarme_non_inserito_porta_aperta
                for_each: "{{for_each}}"
                message: Allarme non inserito per porta aperta
