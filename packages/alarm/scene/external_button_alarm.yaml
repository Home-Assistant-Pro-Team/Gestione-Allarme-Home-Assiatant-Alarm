homeassistant:
  customize:
    package.node_anchors:
      Porta d'ingresso: &porta binary_sensor.porta_ingresso
# Occorre personalizzare il trigger in base al button e l'integrazione usata

automation:
  - alias: "Allarme: Smart Button"
    id: allarme_permit_alarm_night_door
    variables:
      alarm: >-
        {% from 'alarm.jinja' import state_alarm %}
          {{ (state_alarm() |from_json) ['alarm'] }}
      porta: *porta
    trigger:
      - platform: state
        entity_id: sensor.tasto_porta_ingresso_action
        to: "single"
    condition:
      - "{{ is_state(alarm, 'armed_night') }}"
    action:
      - alias: Disattiva Allarme
        service: alarm_control_panel.alarm_disarm
        data:
          code: >-
            {% from 'alarm.jinja' import state_alarm %}
            {{ (state_alarm() | from_json) ['code'] }}
        target:
          entity_id: "{{ alarm }}"

      - service: input_boolean.turn_off
        target:
          entity_id:
            - input_boolean.avviso_porta_ingresso_aperta
            - input_boolean.avviso_porta_ingresso_chiusa_male

      - alias: Attendi che la porta venga chiusa
        wait_for_trigger:
          - platform: state
            entity_id: *porta
            from: "on"
            to: "off"
        timeout:
          minutes: 5

      - service: input_boolean.turn_on
        target:
          entity_id:
            - input_boolean.avviso_porta_ingresso_aperta
            - input_boolean.avviso_porta_ingresso_chiusa_male
            - input_boolean.avviso_porta_ingresso_chiusa_male_timer

      - if:
          - "{{ wait.trigger.to_state.state == 'off' }}"
        then:
          - alias: Inserisci allarme notte se qualcuno è rimasto a letto e ci sono più di una persona in casa
            service: >-
              {% from 'personal.jinja' import persons %}
              {% set output = namespace(state_home=[]) %}
              {% for d in persons() | from_json if states[d.person].state == 'home' %}
              {% set output.state_home = output.state_home + [d['person']] %}
              {% endfor %}
              {{ 'alarm_control_panel.alarm_arm_night' if output.state_home | count > 1 else 'alarm_control_panel.alarm_arm_away' }}
            target:
              entity_id: "{{ alarm }}"
        else:
          - alias: Ripristina allarme per timeout controllando stato porta
            if: "{{ is_state(porta, 'off') }}"
            then:
              - alias: Ripristina allarme per timeout
                service: alarm_control_panel.alarm_arm_night
                target:
                  entity_id: "{{ alarm }}"
            else:
              - alias: Invia notifica push SOLO alla persone che si trovano
                event: customizations
                event_data:
                  types: notify_alarm
                  title1: Attiva globale
                  action1: armed_away
                  title2: Attiva Notte
                  action2: armed_night
                  tag: state_alarm
                  notify: allarme_non_inserito_porta_aperta
                  for_each: >-
                    {% from 'personal.jinja' import persons %}
                    {% set output = namespace(state_home=[]) %}
                      {% for dict in persons() | from_json if states[dict.person].state == 'home' %}
                        {% set output.state_home = output.state_home + ['notify.' + dict['notify']] %}
                      {% endfor %}
                      {{ output.state_home }}
                  message: Allarme non inserito per porta aperta
